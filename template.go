package main

var templateModelBase64 = "Ly8gK2J1aWxkIHNhbXBsZV9zd2FnZ2VyCgpwYWNrYWdlIHNhbXBsZV9zd2FnZ2VyCgp0eXBlIEluZm8gc3RydWN0IHsKCURlc2NyaXB0aW9uICAgIHN0cmluZyBganNvbjoiZGVzY3JpcHRpb24iYAoJVmVyc2lvbiAgICAgICAgc3RyaW5nIGBqc29uOiJ2ZXJzaW9uImAKCVRpdGxlICAgICAgICAgIHN0cmluZyBganNvbjoidGl0bGUiYAoJVGVybXNPZlNlcnZpY2Ugc3RyaW5nIGBqc29uOiJ0ZXJtc09mU2VydmljZSJgCglDb250YWN0ICAgICAgICBzdHJ1Y3QgewoJCUVtYWlsIHN0cmluZyBganNvbjoiZW1haWwiYAoJfSBganNvbjoiY29udGFjdCJgCglMaWNlbnNlIHN0cnVjdCB7CgkJTmFtZSBzdHJpbmcgYGpzb246Im5hbWUiYAoJCVVSTCAgc3RyaW5nIGBqc29uOiJ1cmwiYAoJfSBganNvbjoibGljZW5zZSJgCn0KCnR5cGUgUm91dGVyIHN0cnVjdCB7CglUYWdzICAgICAgICBbXXN0cmluZyAgICAgICAgICAgIGBqc29uOiJ0YWdzImAKCVN1bW1hcnkgICAgIHN0cmluZyAgICAgICAgICAgICAgYGpzb246InN1bW1hcnkiYAoJRGVzY3JpcHRpb24gc3RyaW5nICAgICAgICAgICAgICBganNvbjoiZGVzY3JpcHRpb24iYAoJT3BlcmF0aW9uSUQgc3RyaW5nICAgICAgICAgICAgICBganNvbjoib3BlcmF0aW9uSWQiYAoJQ29uc3VtZXMgICAgW11zdHJpbmcgICAgICAgICAgICBganNvbjoiY29uc3VtZXMiYAoJUHJvZHVjZXMgICAgW11zdHJpbmcgICAgICAgICAgICBganNvbjoicHJvZHVjZXMiYAoJUGFyYW1ldGVycyAgW11QYXJhbWV0ZXIgICAgICAgICBganNvbjoicGFyYW1ldGVycyJgCglSZXNwb25zZXMgICBtYXBbc3RyaW5nXVJlc3BvbnNlIGBqc29uOiJyZXNwb25zZXMiYAp9Cgp0eXBlIFNjaGVtYSBzdHJ1Y3QgewoJUmVmIHN0cmluZyBganNvbjoiJHJlZixvbWl0ZW1wdHkiYAp9Cgp0eXBlIFBhcmFtZXRlciBzdHJ1Y3QgewoJSW4gICAgICAgICAgc3RyaW5nICBganNvbjoiaW4iYAoJTmFtZSAgICAgICAgc3RyaW5nICBganNvbjoibmFtZSJgCglUeXBlICAgICAgICBzdHJpbmcgIGBqc29uOiJ0eXBlImAKCURlc2NyaXB0aW9uIHN0cmluZyAgYGpzb246ImRlc2NyaXB0aW9uImAKCVJlcXVpcmVkICAgIGJvb2wgICAgYGpzb246InJlcXVpcmVkImAKCVNjaGVtYSAgICAgICpTY2hlbWEgYGpzb246InNjaGVtYSxvbWl0ZW1wdHkiYAp9Cgp0eXBlIFJlc3BvbnNlIHN0cnVjdCB7CglEZXNjcmlwdGlvbiBzdHJpbmcgYGpzb246ImRlc2NyaXB0aW9uImAKCVNjaGVtYSAgICAgIHN0cnVjdCB7CgkJVHlwZSAgc3RyaW5nIGBqc29uOiJ0eXBlImAKCQlJdGVtcyBzdHJ1Y3QgewoJCQlSZWYgc3RyaW5nIGBqc29uOiIkcmVmImAKCQl9IGBqc29uOiJpdGVtcyJgCgkJUmVmIHN0cmluZyBganNvbjoiJHJlZiJgCgl9IGBqc29uOiJzY2hlbWEiYAp9Cgp0eXBlIFByb3BlcnR5IHN0cnVjdCB7CglUeXBlICAgICAgICBzdHJpbmcgICAgICBganNvbjoidHlwZSxvbWl0ZW1wdHkiYAoJRm9ybWF0ICAgICAgc3RyaW5nICAgICAgYGpzb246ImZvcm1hdCxvbWl0ZW1wdHkiYAoJRGVzY3JpcHRpb24gc3RyaW5nICAgICAgYGpzb246ImRlc2NyaXB0aW9uLG9taXRlbXB0eSJgCglSZWYgICAgICAgICBzdHJpbmcgICAgICBganNvbjoiJHJlZixvbWl0ZW1wdHkiYAoJSXRlbXMgICAgICAgKkRlZmluaXRpb24gYGpzb246Iml0ZW1zLG9taXRlbXB0eSJgCglQcm9wZXJ0aWVzICAqRGVmaW5pdGlvbiBganNvbjoicHJvcGVydGllcyxvbWl0ZW1wdHkiYAoKCUFkZGl0aW9uYWxQcm9wZXJ0aWVzICpBZGRpdGlvbmFsUHJvcGVydGllcyBganNvbjoiYWRkaXRpb25hbFByb3BlcnRpZXMsb21pdGVtcHR5ImAKfQoKdHlwZSBBZGRpdGlvbmFsUHJvcGVydGllcyBzdHJ1Y3QgewoJVHlwZSBzdHJpbmcgYGpzb246InR5cGUiYAoJUmVmICBzdHJpbmcgYGpzb246IiRyZWYiYAp9Cgp0eXBlIE5lc3RlZFByb3BlcnR5IHN0cnVjdCB7CglJZCAgIHN0cmluZyBganNvbjoiaWQsb21pdGVtcHR5ImAKCU5hbWUgc3RyaW5nIGBqc29uOiJuYW1lLG9taXRlbXB0eSJgCn0KCnR5cGUgRGVmaW5pdGlvbiBzdHJ1Y3QgewoJVHlwZSAgICAgICAgICAgICAgICAgc3RyaW5nICAgICAgICAgICAgICAgICBganNvbjoidHlwZSxvbWl0ZW1wdHkiYAoJRm9ybWF0ICAgICAgICAgICAgICAgc3RyaW5nICAgICAgICAgICAgICAgICBganNvbjoiZm9ybWF0LG9taXRlbXB0eSJgCglJdGVtcyAgICAgICAgICAgICAgICAqRGVmaW5pdGlvbiAgICAgICAgICAgIGBqc29uOiJpdGVtcyxvbWl0ZW1wdHkiYAoJUHJvcGVydGllcyAgICAgICAgICAgbWFwW3N0cmluZ10qRGVmaW5pdGlvbiBganNvbjoicHJvcGVydGllcyxvbWl0ZW1wdHkiYAoJQWRkaXRpb25hbFByb3BlcnRpZXMgKkRlZmluaXRpb24gICAgICAgICAgICBganNvbjoiYWRkaXRpb25hbFByb3BlcnRpZXMsb21pdGVtcHR5ImAKCVJlZiAgICAgICAgICAgICAgICAgIHN0cmluZyAgICAgICAgICAgICAgICAgYGpzb246IiRyZWYsb21pdGVtcHR5ImAKfQp0eXBlIFN3YWdnZXIgc3RydWN0IHsKCVN3YWdnZXIgICAgIHN0cmluZyAgICAgICAgICAgICAgICAgYGpzb246InN3YWdnZXIiYAoJSW5mbyAgICAgICAgKkluZm8gICAgICAgICAgICAgICAgICBganNvbjoiaW5mbyJgCglIb3N0ICAgICAgICBzdHJpbmcgICAgICAgICAgICAgICAgIGBqc29uOiJob3N0ImAKCUJhc2VQYXRoICAgIHN0cmluZyAgICAgICAgICAgICAgICAgYGpzb246ImJhc2VQYXRoImAKCVNjaGVtZXMgICAgIFtdc3RyaW5nICAgICAgICAgICAgICAgYGpzb246InNjaGVtZXMiYAoJUGF0aHMgICAgICAgbWFwW3N0cmluZ11NZXRob2QgICAgICBganNvbjoicGF0aHMiYAoJRGVmaW5pdGlvbnMgbWFwW3N0cmluZ10qRGVmaW5pdGlvbiBganNvbjoiZGVmaW5pdGlvbnMiYAp9Cgp0eXBlIE1ldGhvZCBtYXBbc3RyaW5nXVJvdXRlcgoKZnVuYyBNYXBUeXBlKHR5cCBzdHJpbmcpIHN0cmluZyB7Cglzd2l0Y2ggdHlwIHsKCWNhc2UgImludCIsICJpbnQ4IiwgImludDE2IiwgImludDMyIiwgImludDY0IiwgInVpbnQiLCAidWludDgiLCAidWludDE2IiwgInVpbnQzMiIsICJ1aW50NjQiOgoJCXJldHVybiAiaW50ZWdlciIKCWNhc2UgInN0cmluZyIsICJzdHIiLCAicyI6CgkJcmV0dXJuICJzdHJpbmciCgljYXNlICJib29sIiwgImJvb2xlYW4iLCAiYiI6CgkJcmV0dXJuICJib29sZWFuIgoJY2FzZSAib2JqZWN0IiwgIm9iaiIsICJvIjoKCQlyZXR1cm4gIm9iamVjdCIKCWNhc2UgImZsb2F0MzIiLCAiZmxvYXQ2NCI6CgkJcmV0dXJuICJudW1iZXIiCgljYXNlICJhcnJheSIsICJzbGljZSI6CgkJcmV0dXJuICJhcnJheSIKCWNhc2UgIm1hcCI6CgkJcmV0dXJuICJtYXAiCgl9CglyZXR1cm4gInt9IiAvLyBhbnkKfQo="

var templateParseBase64 = ""

var templateServerBase64 = "Ly8gK2J1aWxkIHNhbXBsZV9zd2FnZ2VyCgpwYWNrYWdlIHNhbXBsZV9zd2FnZ2VyCgppbXBvcnQgKAoJImh0bWwvdGVtcGxhdGUiCgkibmV0L2h0dHAiCikKCnZhciBzZXJ2ZXJKc29uIHN0cmluZwoKdmFyIGh0bWxUZW1wID0gYAo8IS0tIEhUTUwgZm9yIHN0YXRpYyBkaXN0cmlidXRpb24gYnVuZGxlIGJ1aWxkIC0tPgo8IURPQ1RZUEUgaHRtbD4KPGh0bWwgbGFuZz0iZW4iPgo8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4KICAgIDx0aXRsZT5Td2FnZ2VyIFVJPC90aXRsZT4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiCiAgICAgICAgICBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9zd2FnZ2VyLXVpLzMuMTguMi9zd2FnZ2VyLXVpLmNzcyI+CiAgICA8bGluayByZWw9Imljb24iIHR5cGU9ImltYWdlL3BuZyIgaHJlZj0iZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFDQUFBQUFnQ0FZQUFBQnplbnIwQUFBRVBFbEVRVlI0QWIxWEE4eGxXUXgrYTl1MmJjUmV4MTdidGoxRzhOdTJiZHUyYmZPaTAyL3l6ak4vTldudVlkdGJINDJqb0tycXFiS3krYVNzU0QveU4wS1MxNnQ0UEFLVTVJMGEva1poRDJkd1ZyTlRvS2p5aFV6NGUwV1Irb2hVY2dSd2xnWDVrZTllYkkrK25UK1czbVlpVTRJd3I5SHdkQU9WdEhwU1l1WFBGRjcwSVpESFAxRnhxd2Z2MVJQT0NNQmRwdkV1YURuSlhMbVkveUJPRUZ2ZlhLYThwdVAwYjhUZDlKbW54aWIrRTNFWDVUWWU0enRMT3FGWmlBVFFkSlQ1MVh5aFFWeXU2Z3FoWDRLdkFYR244SmVncTZteU13ZzBoRm1hbVBhMWR2OWNNR2ZIb3BEOHQwRnNXeGljL3lheHd4b0lvVjVzeStaeGdybEh4aXNnc0NQb252YWlvUkFKRm4wQ0RnZDFBVVB5MzhMRkhjV2d2RGRJMElkam1xcitRdmJZQ1dLbzZnbzJ1dmkxenpsVTBSRkFxK3R6TkRSVmE1ZlI0RlFOclc3TXcvNzB0ZSs1Um5zVm5RRzY2REFLVWNTNThIWlRoNHN1L1lJQTQzTnRsTjF3eUs0QTJmVUhhV3kyaFFDeFpWOGI3ZjBjZEpVdU9wQzBkTFpudS9SZ01ZL0R4NVFnb2dDd1Avb2hoOVg5WDlSOUJLanRpVERieTJrNG92VUZ1ZStrTHlCMWlwQkRESnRlYUJsTUljRHZvVGM1TEFDMENHZ2RURFBiK3p2OERsMW9NdStuTlZBRkpzaGlPR0F1UUJvQmZndTUzbUVCZmd5OEhFeW9kU2pkMGo1OFNVVEV6OUJBQkNZbHJSNFdEL2VObDBGUytzcm5iSWNGK05MN0RJUWREVXhXV2R3dmFuVVRHb2pTb0twaGdueHVlbkJmOUFQSUNkUTdYb281ZmU1MW1wRWdZQVFVYyt6aERNWmRvd1ZnWU5GM0VpcCtJQUR6cnRPZ25HS0NvbUo0S0xOdUgzRjQwdkxhTkIyS2ZSeHIxRDZjU1N2cnMvUnJ5SFZnVEpQelhUUzEwTVBqTTludTEvTFpHZW9ZeWNGWk9oajdLQzJ0VG9JR1pkVWZNS0lkVnZpK01NR1lOUUg0MG41Y3BxVzFLU2IybUZhQWJPUUQrQU1FQUhPYVh1eUZBUFFyQ3dEaE9rZnljSllPeER4Q2k2c1RvSUhRdEM0QXE5aXFDZmJIUEt3MVFRbm05QVdyOTJzakU1d0pORExCRnpvVDVNTUVFTjZ1Q1NJd0tiYm1oQlBDQ2M5eTJnbjdKeXN0TzJHTGNFSXBabmZDTU1CbUdDSmRDd0VRaHBKQklycHpEeExSN1FhSlNIcGFtNHJsUGl6a05oNDF1MURkRlVxQWZjNms0c2g3YmFUaXc4SUJCOERicEJndG9aTXh1aEJUK2lXMlVHQVFHWGFaSTN4SFo1c0pFRmYyalVreHVwTFdOaGRGRXZyWnFQTlZWR1VLRzVXZGdXYmxHS1YxYldPQmhxYnI3QW1BTk10bkY2RTUrc2IzUEtPOThnNS9Bb0NYV2Nlc0dEUWthS04ydWlFSnpIdk50Q0d4MkpJbGFPT1QzTk5mMmpIbXJtblBnNlp3dkNUd3N0cVVvbkVVUWtBVDIvL3oxdzM2UWJuRmJudU8xbGtJQVhYQkozNFdqdWtFb3Z0Qks4YzBESmlyMXpyOE1ORjJyeVNpSTdmeENQMXRJVTlZYURnUWFueG4wZUJoc3BrRW1sdDVtcjFyOGpSREpLQ2VJNStqcUFBeHhob2l3T1JwcHN3dzgvZTM5VmhGdU9DaHljSU1rSU9BSklNNDM5YmoxSUpHVGtjUGh6YUt2ekdvWkNpblFJeFJXSkRiR1ovRldVZnBuZ0NsZVROZG1rcmhJZ0FBQUFCSlJVNUVya0pnZ2c9PQoiIHNpemVzPSIzMngzMiIvPgogICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS9wbmciIGhyZWY9ImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQkFBQUFBUUNBWUFBQUFmOC85aEFBQUJoRWxFUVZSNEFaVlRBMHgxY1J6OWpQSEQ3RENuS2MxaHRtczJzcHY1c212SU5TL2JqWEY0eHBSdHpIdnZmMC8vODJ6YzdmTGcvdmpKLzFBVUVTOFVXNk5ReEtHOFAvRjBQamNTY3hNRGhjbzNTVklKWWJWcWo2Y3h2bDJJOXJsTThCeVR6OXJqS1JDVFpvM2tCaFBQM2p5YjBUU1ZpcEtCVDBIUFJvbmRQSnNnVGVaOVRPUUhGY1gxNC85SkRIdldqZjl6bVRTNmMyWm9yait2YXhwd2NuY1FJRHk1MjhlR3B0RVpTUXFvc2RlRWVUTm5GekZVSkxWamYzSDdZbkcvYTQ0bkhWR3d3aXlTQzNoOE8wYmw4TzhBZy9LaEgzaDhQM0c5eThJV2dGcEc4TVJLOCtQa2JqSE1GMnRnT24zTGVlaVl5MExIZkRaNmwzTFJOSjBHMC9tSzVKU1FpN2JaREZEclkwRFFmTDRxeVRUSXA1Z256V2dBNDlreXBuWkxmUXhDcFBBclJBckhnU213RUpyanFkaUxlT1Fvb3J1TmJBMEJ0b290OHpjNHZ0M0hwcmJKMmNaazJGeHQ5QXlTQ1hWUkR0TDFzOUh4ZDk5UkZyTTBZU1NoeE1Rb1ZyeEcyZCtra2Vtd0ppd1NLODJUenh3Y1l0ektBSEYwNjh3dEZJbisvQTl0TW1xSTdNeHpHQUFBQUFCSlJVNUVya0pnZ2c9PQoiIHNpemVzPSIxNngxNiIvPgogICAgPHN0eWxlPgogICAgICAgIGh0bWwgewogICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgICAgICBvdmVyZmxvdzogLW1vei1zY3JvbGxiYXJzLXZlcnRpY2FsOwogICAgICAgICAgICBvdmVyZmxvdy15OiBzY3JvbGw7CiAgICAgICAgfQoKICAgICAgICAqLAogICAgICAgICo6YmVmb3JlLAogICAgICAgICo6YWZ0ZXIgewogICAgICAgICAgICBib3gtc2l6aW5nOiBpbmhlcml0OwogICAgICAgIH0KCiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgYmFja2dyb3VuZDogI2ZhZmFmYTsKICAgICAgICB9CiAgICA8L3N0eWxlPgo8L2hlYWQ+Cgo8Ym9keT4KPGRpdiBpZD0ic3dhZ2dlci11aSI+PC9kaXY+CjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9zd2FnZ2VyLXVpLzMuMTguMi9zd2FnZ2VyLXVpLWJ1bmRsZS5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9zd2FnZ2VyLXVpLzMuMTguMi9zd2FnZ2VyLXVpLXN0YW5kYWxvbmUtcHJlc2V0LmpzIj48L3NjcmlwdD4KPHNjcmlwdD4KCiAgICB2YXIgc3BlYyA9IHt7LlNwZWN9fTsKCglzcGVjID0gSlNPTi5wYXJzZShzcGVjKTsKCiAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgIGNvbnN0IHVpID0gU3dhZ2dlclVJQnVuZGxlKHsKICAgICAgICAgICAgc3BlYzogc3BlYywKICAgICAgICAgICAgZG9tX2lkOiAnI3N3YWdnZXItdWknLAogICAgICAgICAgICBkZWVwTGlua2luZzogdHJ1ZSwKICAgICAgICAgICAgcHJlc2V0czogWwogICAgICAgICAgICAgICAgU3dhZ2dlclVJQnVuZGxlLnByZXNldHMuYXBpcywKICAgICAgICAgICAgICAgIFN3YWdnZXJVSVN0YW5kYWxvbmVQcmVzZXQuc2xpY2UoMSkgLy8gaGVyZQogICAgICAgICAgICBdLAogICAgICAgICAgICBsYXlvdXQ6ICJTdGFuZGFsb25lTGF5b3V0IgogICAgICAgIH0pOwogICAgICAgIHdpbmRvdy51aSA9IHVpOwogICAgfQo8L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+CmAKCmZ1bmMgU2VydmVySFRUUCh3IGh0dHAuUmVzcG9uc2VXcml0ZXIsIHIgKmh0dHAuUmVxdWVzdCkgewoJaWYgc2VydmVySnNvbiA9PSAiIiB7CgkJc2VydmVySnNvbiA9IHBhcnNlKCkKCQlpZiBzZXJ2ZXJKc29uID09ICIiIHsKCQkJc2VydmVySnNvbiA9ICJ7fSIKCQl9Cgl9Cgl0LCBlcnIgOj0gdGVtcGxhdGUuTmV3KCJzd2FnZ2VyIikuUGFyc2UoaHRtbFRlbXApCglpZiBlcnIgIT0gbmlsIHsKCQl3LldyaXRlKFtdYnl0ZShlcnIuRXJyb3IoKSkpCgkJcmV0dXJuCgl9CgllcnIgPSB0LkV4ZWN1dGUodywgbWFwW3N0cmluZ11zdHJpbmd7IlNwZWMiOiBzZXJ2ZXJKc29ufSkKCWlmIGVyciAhPSBuaWwgewoJCXcuV3JpdGUoW11ieXRlKGVyci5FcnJvcigpKSkKCX0KfQo="

var templateServer2Base64 = "Ly8gK2J1aWxkICFzYW1wbGVfc3dhZ2dlcgoKcGFja2FnZSBzYW1wbGVfc3dhZ2dlcgoKaW1wb3J0ICJuZXQvaHR0cCIKCmZ1bmMgU2VydmVySFRUUCh3IGh0dHAuUmVzcG9uc2VXcml0ZXIsIHIgKmh0dHAuUmVxdWVzdCkgewoJdy5Xcml0ZShbXWJ5dGUoYFBsZWFzZSB1c2UgYnVpbGQgdGFnICJzYW1wbGVfc3dhZ2dlciIgdG8gb3BlbiBzd2FnZ2VyIWApKQp9Cg=="

const templateVars = `// +build sample_swagger

package sample_swagger

import (
	{{Imports}}
)

var generatorJson = {{GeneratorJson}}

var generatorModels = []interface{}{
	{{GeneratorModels}}
}

`
